// Generated by CoffeeScript 1.4.0
(function() {
  var game, gfx;

  gfx = {
    init: function() {
      var canvas;
      canvas = document.querySelector("#game");
      this.ctx = canvas != null ? typeof canvas.getContext === "function" ? canvas.getContext("2d") : void 0 : void 0;
      if (!this.ctx) {
        return false;
      }
      this.w = canvas.width;
      this.h = canvas.height;
      this.tileW = 24;
      this.tileH = 24;
      return true;
    },
    clear: function() {
      return this.ctx.clearRect(0, 0, this.w, this.h);
    },
    load: function(onload) {
      this.sprites = new Image();
      this.sprites.src = "resources/sprites.png";
      return this.sprites.onload = function() {
        return onload();
      };
    },
    drawSprite: function(col, row, x, y, w, h, scale) {
      if (w == null) {
        w = 1;
      }
      if (h == null) {
        h = 1;
      }
      if (scale == null) {
        scale = 1;
      }
      w = this.tileW;
      h = this.tileH;
      return this.ctx.drawImage(this.sprites, col * w, row * h, w, h, x, y, w * scale, h * scale);
    }
  };

  game = {
    init: function() {
      if (!gfx.init()) {
        alert("Could not set up game canvas!");
        return;
      }
      gfx.clear();
      return gfx.load(function() {
        var c, drawANinja, fillMap, leftninjas, level, level1, makeANinja, makeLevel, n, ninjas, rand, row, scaletest, test, tile, x, xPos, y, yPos, _i, _len, _results;
        c = gfx.ctx;
        rand = function(max) {
          return Math.floor(Math.random() * max);
        };
        test = function() {
          c.fillStyle = "orange";
          c.fillRect(10, 10, 300, 80);
          c.strokeStyle = "#3f3f3f";
          c.strokeRect(10, 10, 300, 80);
          c.fillStyle = "#202020";
          c.font = "14pt monospace";
          return c.fillText("Professor Digman-Runner", 30, 55);
        };
        scaletest = function() {
          gfx.drawSprite(0, 0, 50, 50);
          return gfx.drawSprite(0, 0, 74, 50, 1, 1, 2);
        };
        fillMap = function() {
          var col, row, x, y, _i, _results;
          _results = [];
          for (y = _i = 0; _i <= 19; y = ++_i) {
            _results.push((function() {
              var _j, _results1;
              _results1 = [];
              for (x = _j = 0; _j <= 23; x = ++_j) {
                col = rand(7);
                row = rand(3);
                _results1.push(gfx.drawSprite(4, row, x * 24, y * 24));
              }
              return _results1;
            })());
          }
          return _results;
        };
        makeANinja = function() {
          return {
            x: rand(gfx.w),
            y: rand(gfx.h)
          };
        };
        drawANinja = function(n) {
          return gfx.drawSprite(0, 1, n.x, n.y);
        };
        ninjas = (function() {
          var _i, _results;
          _results = [];
          for (_i = 0; _i <= 20; _i++) {
            _results.push(makeANinja());
          }
          return _results;
        })();
        leftninjas = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ninjas.length; _i < _len; _i++) {
            n = ninjas[_i];
            if (n.x < gfx.w / 2) {
              _results.push(n);
            }
          }
          return _results;
        })();
        level1 = ".............\n...........*.\n....@#@@@@#@.\n.....#....#..\n.....#....#..\n..*..#...@@@.\n..@@@@@...#..\n...#......#..\n...#......#..\n...#......#..\n.OOOOOOOOOOOO";
        makeLevel = function(ascii) {
          var asciiMap, col, row, tiles, _i, _len, _results;
          tiles = {
            "@": [4, 1],
            "O": [4, 0],
            "#": [5, 0],
            "*": [5, 1]
          };
          asciiMap = (function() {
            var _i, _len, _ref, _results;
            _ref = ascii.split("\n");
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              _results.push(row.split(""));
            }
            return _results;
          })();
          _results = [];
          for (_i = 0, _len = asciiMap.length; _i < _len; _i++) {
            row = asciiMap[_i];
            _results.push((function() {
              var _j, _len1, _results1;
              _results1 = [];
              for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
                col = row[_j];
                _results1.push(tiles[col]);
              }
              return _results1;
            })());
          }
          return _results;
        };
        level = makeLevel(level1);
        _results = [];
        for (y = _i = 0, _len = level.length; _i < _len; y = ++_i) {
          row = level[y];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (x = _j = 0, _len1 = row.length; _j < _len1; x = ++_j) {
              tile = row[x];
              if (!tile) {
                continue;
              }
              xPos = x * gfx.tileW;
              yPos = y * gfx.tileH;
              _results1.push(gfx.drawSprite(tile[0], tile[1], xPos, yPos));
            }
            return _results1;
          })());
        }
        return _results;
      });
    }
  };

  game.init();

}).call(this);
